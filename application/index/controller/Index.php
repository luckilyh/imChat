<?php

namespace app\index\controller;

use think\Controller;
use think\Request;
use think\facade\Cache;

class Index extends Controller
{
    protected $key;
    protected $redis;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->key = config('chat.key');
        $this->redis = Cache::store('redis')->handler();
    }

    public function index($token='')
    {
        if ($token == ''){
            return $this->redirect('/login');
        }
        $this->assign('token', $token);
        return $this->fetch();
    }

    public function register(Request $request)
    {
        if ($request->isGet()) {
            return $this->fetch();
        };
        if ($request->isPost()) {
            $username = $request->param('name');
            $password = md5($request->param('passWord'));
            if ($this->redis->get('username:'.$username)){
                $data = [
                    'status' => -1,
                    'data' => [

                    ],
                    'msg' => '用户已存在',
                ];
                return json($data);
            };
            //redis 存用户信息 hash user:1 key => ['username'=>'','id'=>1, ...]
            $user_id = $this->redis->incr('user:id');
            $user_info = [
                "username" => $username //我的昵称
                , "password" => $password //我的密码
                , "id" => $user_id //我的ID
                , "status" => "online" //在线状态 online：在线、hide：隐身
                , "sign" => "在深邃的编码世界，做一枚轻盈的纸飞机" //我的签名
                , "avatar" => "http://tp1.sinaimg.cn/5619439268/180/40030060651/1" //我的头像
                , "ip" => $request->ip() //用户ip
                , "time" => time(), //注册时间
            ];
            $this->redis->hMset('user:' . $user_id, $user_info);
            $this->redis->set('username:' . $username,$user_id);
            $token = encrypt($user_id, $this->key);
            $data = [
                'status' => 0,
                'data' => [
                    'token' => $token
                ],
                'msg' => '',
            ];
            return json($data);
        }
    }

    public function login(Request $request)
    {
        if ($request->isGet()) {
            return $this->fetch();
        };
        if ($request->isPost()) {
            $username = $request->param('name');
            $password = md5($request->param('passWord'));
            $user_id = $this->redis->get('username:'.$username);
            if (!$user_id){
                $data = [
                    'status' => -1,
                    'data' => [

                    ],
                    'msg' => '用户不存在',
                ];
                return json($data);
            };

            $info = $this->redis->hMGet('user:' . $user_id,['password']);
            if ($info['password'] != $password){
                $data = [
                    'status' => -1,
                    'data' => [

                    ],
                    'msg' => '密码错误',
                ];
                return json($data);
            }
            $token = encrypt($user_id, $this->key);
            $data = [
                'status' => 0,
                'data' => [
                    'token' => $token
                ],
                'msg' => '',
            ];
            return json($data);
        }
    }

    public function getFriend($user_id)
    {
        $id = decrypt($user_id, $this->key);
        $data['code'] = 0;
        $data['msg'] = '';
        $user_info = $this->redis->hGetAll('user:' . $id);
        $data['data']['mine'] = [
            "username" => $user_info['username']
            , "id" => $user_info['id']
            , "status" => $user_info['status']
            , "sign" => $user_info['sign']
            , "avatar" => $user_info['avatar']
        ];

        $members = $this->redis->keys("user:*");
        $friends = [];
        foreach ($members as $k) {
            if ($k == 'user:id' || $k == 'user:' . $id) {
                continue;
            }
            $r = $this->redis->hGetAll($k);
            $friends[] = [
                "username" => $r['username']
                , "id" => $r['id']
                , "status" => $r['status']
                , "sign" => $r['sign']
                , "avatar" => $r['avatar']
            ];
        }
        $data['data']['friend'][0] = [
            "groupname" => "我的好友"
            , "id" => 1
            , "online" => 1
            , "list" => $friends

        ];

        return json($data);
    }

    public function uploadImage(Request $request)
    {
        // 获取表单上传文件 例如上传了001.jpg
        $file = $request->file('file');
        // 移动到框架应用根目录/uploads/ 目录下
        $info = $file->move('./uploads');
        if ($info) {
            $data = [
                "code" => 0 //0表示成功，其它表示失败
                , "msg" => "长传成功！" //失败信息
                , "data" => [
                    "src" => '/uploads/'.$info->getSaveName() //图片url
                ]
            ];
        } else {
            // 上传失败获取错误信息
            $data = [
                "code" => -1 //0表示成功，其它表示失败
                , "msg" => $file->getError() //失败信息
                , "data" => [
                    "src" => "" //图片url
                ]
            ];
        }
        echo json_encode($data);
    }

    public function chatLog(Request $request){
        $data = $request->param();
        $token = substr($data['token'],0,strpos($data['token'], '?id='));
        $form_id = decrypt($token,$this->key);
        $to_id = trim(strrchr($data['token'], '?id='),'?id=');
        $arr = [$form_id,$to_id];
        sort($arr);
        $record = $this->redis->lRange("chat:{$arr[0]}:{$arr[1]}", 0, -1);
        foreach ($record as $k=>$v){
            $record[$k] = json_decode($v);
        }
        $data = [
            'code'=> 0
            ,'msg'=> ''
            ,'data'=> $record
        ];
        $this->assign('data',json_encode($data));
        return $this->fetch('chatlog');
    }

    public function updateSign(Request $request){
        $sign = $request->param('sign');
        $token = $request->param('token');
        $id = decrypt($token,$this->key);
        $this->redis->hMset('user:'.$id, ['sign'=>$sign]);
    }

    public function updateOnline(Request $request){
        $status = $request->param('status');
        $token = $request->param('token');
        $id = decrypt($token,$this->key);
        $this->redis->hMset('user:'.$id, ['status'=>$status]);
    }
}
